type token =
    TRUE
  | THEN
  | STAR
  | SOME
  | SLASH
  | RPAREN
  | REC
  | RBRACKET
  | PLUS
  | PERCENT
  | OR
  | NOT
  | NE
  | MINUS
  | LT
  | LPAREN
  | LET
  | LE
  | LBRACKET
  | INT of int
  | IN
  | IF
  | IDENT of string
  | GT
  | GE
  | FUN
  | FORALL
  | FALSE
  | EQUALS
  | EQ
  | EOF
  | ELSE
  | COMMA
  | COLON
  | ARROW
  | AND
module StringMap :
  sig
    type key = string
    type 'a t = 'a Infer.Env.StringMap.t
    val empty : 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val add : key -> 'a -> 'a t -> 'a t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
  end
val unary : string -> Expr.s_expr -> Expr.s_expr
val binary : string -> Expr.s_expr -> Expr.s_expr -> Expr.s_expr
val replace_ty_constants_with_vars : string list -> 'a Expr.ty -> 'a Expr.ty
val menhir_begin_marker : int
val xv_ty_forall_eof : Expr.s_ty
val xv_ty_forall : Expr.s_ty
val xv_ty_eof : Expr.s_expr Expr.ty
val xv_ty_comma_list : Expr.s_expr Expr.ty list
val xv_ty : Expr.s_expr Expr.ty
val xv_some_simple_ty : Expr.s_expr Expr.ty
val xv_simple_ty : Expr.s_expr Expr.ty
val xv_simple_expr : Expr.s_expr
val xv_return_ty : Expr.s_expr Expr.refined_ty
val xv_relation_op : string
val xv_relation_expr : Expr.s_expr
val xv_refined_ty : Expr.s_expr Expr.refined_ty
val xv_param_ty_list : Expr.s_expr Expr.refined_ty list
val xv_param_ty : Expr.s_expr Expr.refined_ty
val xv_param_list : Expr.s_param list
val xv_param : Expr.s_param
val xv_ident_list : string list
val xv_function_ty : Expr.s_expr Expr.ty
val xv_function_ret_ty : Expr.s_expr Expr.refined_ty
val xv_fun_expr : Expr.s_expr
val xv_expr_eof : Expr.s_expr
val xv_expr_comma_list : Expr.s_expr list
val xv_expr : Expr.s_expr
val xv_boolean_expr : Expr.s_expr
val xv_arithmetic_expr : Expr.s_expr
val menhir_end_marker : int
